version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: oem3d_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: oem_3d_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - oem3d_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d oem_3d_system"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: oem3d_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - oem3d_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API (Development with volume mounting)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: oem3d_backend_dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: oem_3d_system
      DB_USER: postgres
      DB_PASSWORD: postgres123
      JWT_SECRET: your_super_secret_jwt_key_here_make_it_long_and_random_for_development
      FRONTEND_URL: http://localhost:3000
      REDIS_URL: redis://redis:6379
      UPLOAD_MAX_SIZE: 10485760
      UPLOAD_ALLOWED_TYPES: image/jpeg,image/png,image/webp,model/gltf-binary
    ports:
      - "3001:3001"
    volumes:
      - ./backend/src:/app/src
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - oem3d_network

  # Frontend App (Development with volume mounting)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: oem3d_frontend_dev
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
      NEXT_PUBLIC_APP_URL: http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - oem3d_network

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  oem3d_network:
    driver: bridge
